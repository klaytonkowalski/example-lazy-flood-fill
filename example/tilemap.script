--------------------------------------------------------------------------------
-- LICENSE
--------------------------------------------------------------------------------

-- Copyright (c) 2024 White Box Dev

-- This software is provided 'as-is', without any express or implied warranty.
-- In no event will the authors be held liable for any damages arising from the use of this software.

-- Permission is granted to anyone to use this software for any purpose,
-- including commercial applications, and to alter it and redistribute it freely,
-- subject to the following restrictions:

-- 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software.
--    If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.

-- 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.

-- 3. This notice may not be removed or altered from any source distribution.

--------------------------------------------------------------------------------
-- INFORMATION
--------------------------------------------------------------------------------

-- https://github.com/whiteboxdev/example-lazy-flood-fill

----------------------------------------------------------------------
-- DEPENDENCIES
----------------------------------------------------------------------

local util = require "example.util"

----------------------------------------------------------------------
-- CONSTANTS
----------------------------------------------------------------------

local visited = 0

----------------------------------------------------------------------
-- PROPERTIES
----------------------------------------------------------------------

go.property("width", 160)
go.property("height", 90)

local grid

go.property("iterations", 30)
go.property("decay", 0.9990)

----------------------------------------------------------------------
-- FUNCTIONS
----------------------------------------------------------------------

local function lazy_flood_fill(self)
	for i = 1, self.iterations do
		local tile_id = math.random(1, 8) * 8
		local chance = 100
		local deque = util.deque.new()
		util.deque.push_back(deque, { math.random(1, self.width), math.random(1, self.height) })
		while not util.deque.is_empty(deque) do
			local x = util.deque.front(deque)[1]
			local y = util.deque.front(deque)[2]
			grid[y][x] = tile_id
			util.deque.pop_front(deque)
			if math.random(1, 100) <= chance then
				if util.is_within_bounds(self.width, self.height, x, y - 1) and grid[y - 1][x] ~= tile_id and grid[y - 1][x] ~= visited then
					util.deque.push_back(deque, { x, y - 1 })
					grid[y - 1][x] = visited
				end
				if util.is_within_bounds(self.width, self.height, x - 1, y) and grid[y][x - 1] ~= tile_id and grid[y][x - 1] ~= visited then
					util.deque.push_back(deque, { x - 1, y })
					grid[y][x - 1] = visited
				end
				if util.is_within_bounds(self.width, self.height, x + 1, y) and grid[y][x + 1] ~= tile_id and grid[y][x + 1] ~= visited then
					util.deque.push_back(deque, { x + 1, y })
					grid[y][x + 1] = visited
				end
				if util.is_within_bounds(self.width, self.height, x, y + 1) and grid[y + 1][x] ~= tile_id and grid[y + 1][x] ~= visited then
					util.deque.push_back(deque, { x, y + 1 })
					grid[y + 1][x] = visited
				end
			end
			chance = chance * self.decay
		end
	end
end

local function draw(self)
	for i = 1, self.height do
		for j = 1, self.width do
			tilemap.set_tile("#tilemap", "layer_1", j, i, grid[i][j])
		end
	end
end

function init(self)
	msg.post("#", util.acquire_input_focus)
	math.randomseed(os.clock() * 100000000000)
	grid = util.get_table(self.height, self.width, 1)
	lazy_flood_fill(self)
	draw(self)
end

function on_input(self, action_id, action)
	if action.pressed then
		if action_id == util.one then
			grid = util.get_table(self.height, self.width, 1)
			lazy_flood_fill(self)
			draw(self)
		elseif action_id == util.two then
			self.iterations = self.iterations - 2
			if self.iterations < 2 then
				self.iterations = 2
			else
				msg.post("/gui#gui", util.update_iterations, { value = self.iterations })
				grid = util.get_table(self.height, self.width, 1)
				lazy_flood_fill(self)
				draw(self)
			end
		elseif action_id == util.three then
			self.iterations = self.iterations + 2
			if self.iterations > 40 then
				self.iterations = 40
			else
				msg.post("/gui#gui", util.update_iterations, { value = self.iterations })
				grid = util.get_table(self.height, self.width, 1)
				lazy_flood_fill(self)
				draw(self)
			end
		elseif action_id == util.four then
			self.decay = self.decay - 0.0005
			if self.decay < 0.9750 then
				self.decay = 0.9750
			else
				msg.post("/gui#gui", util.update_decay, { value = self.decay })
				grid = util.get_table(self.height, self.width, 1)
				lazy_flood_fill(self)
				draw(self)
			end
		elseif action_id == util.five then
			self.decay = self.decay + 0.0005
			if self.decay > 0.9999 then
				self.decay = 0.9999
			else
				msg.post("/gui#gui", util.update_decay, { value = self.decay })
				grid = util.get_table(self.height, self.width, 1)
				lazy_flood_fill(self)
				draw(self)
			end
		end
	end
end